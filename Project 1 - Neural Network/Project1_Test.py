from FeedforwardNeuralNetwork import FeedForwardNetwork
import numpy as np


if __name__ == '__main__':
    training_data = [# Cross
                     (([.1, .1, .9, .1, .1],
                     [.1, .1, .9, .1, .1],
                     [.9, .9, .9, .9, .9],
                     [.1, .1, .9, .1, .1],
                     [.1, .1, .9, .1, .1]),
                     (.9, .1, .1, .1, .1, .1)),

                     # Dash
                     (([.1, .1, .1, .1, .1],
                       [.1, .1, .1, .1, .1],
                       [.9, .9, .9, .9, .9],
                       [.1, .1, .1, .1, .1],
                       [.1, .1, .1, .1, .1]),
                       (.1, .9, .1, .1, .1, .1)),

                     # Backslash
                     (([.9, .1, .1, .1, .1],
                       [.1, .9, .1, .1, .1],
                       [.1, .1, .9, .1, .1],
                       [.1, .1, .1, .9, .1],
                       [.1, .1, .1, .1, .9]),
                       (.1, .1, .9, .1, .1, .1)),

                     # Forward Slash
                     (([.1, .1, .1, .1, .9],
                       [.1, .1, .1, .9, .1],
                       [.1, .1, .9, .1, .1],
                       [.1, .9, .1, .1, .1],
                       [.9, .1, .1, .1, .1]),
                       (.1, .1, .1, .9, .1, .1)),

                     # X
                     (([.9, .1, .1, .1, .9],
                       [.1, .9, .1, .9, .1],
                       [.1, .1, .9, .1, .1],
                       [.1, .9, .1, .9, .1],
                       [.9, .1, .1, .1, .9]),
                       (.1, .1, .1, .1, .9, .1)),

                     # Vertical Line
                     (([.1, .1, .9, .1, .1],
                       [.1, .1, .9, .1, .1],
                       [.1, .1, .9, .1, .1],
                       [.1, .1, .9, .1, .1],
                       [.1, .1, .9, .1, .1]),
                       (.1, .1, .1, .1, .1, .9))]

    training_data2 = [# 0. Cross
                    # (([.1, .1, .9, .1, .1],
                    #   [.1, .1, .9, .1, .1],
                    #   [.9, .9, .9, .9, .9],
                    #   [.1, .1, .9, .1, .1],
                    #   [.1, .1, .9, .1, .1]),
                    # (.9, .1, .1, .1, .1, .1, .1)),
                    #
                    # # 1. Dash
                    # (([.1, .1, .1, .1, .1],
                    #   [.1, .1, .1, .1, .1],
                    #   [.9, .9, .9, .9, .9],
                    #   [.1, .1, .1, .1, .1],
                    #   [.1, .1, .1, .1, .1]),
                    # (.1, .9, .1, .1, .1, .1, .1)),
                    #
                    # # 2. Backslash
                    # (([.9, .1, .1, .1, .1],
                    #   [.1, .9, .1, .1, .1],
                    #   [.1, .1, .9, .1, .1],
                    #   [.1, .1, .1, .9, .1],
                    #   [.1, .1, .1, .1, .9]),
                    # (.1, .1, .9, .1, .1, .1, .1)),
                    #
                    # # 3. Forward Slash
                    # (([.1, .1, .1, .1, .9],
                    #   [.1, .1, .1, .9, .1],
                    #   [.1, .1, .9, .1, .1],
                    #   [.1, .9, .1, .1, .1],
                    #   [.9, .1, .1, .1, .1]),
                    # (.1, .1, .1, .9, .1, .1, .1)),
                    #
                    # # 4. X
                    # (([.9, .1, .1, .1, .9],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .1, .9, .1, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.9, .1, .1, .1, .9]),
                    # (.1, .1, .1, .1, .9, .1, .1)),
                    #
                    # # 5. Vertical Line
                    # (([.1, .1, .9, .1, .1],
                    #   [.1, .1, .9, .1, .1],
                    #   [.1, .1, .9, .1, .1],
                    #   [.1, .1, .9, .1, .1],
                    #   [.1, .1, .9, .1, .1]),
                    # (.1, .1, .1, .1, .1, .9, .1)),

                    # 6. Asterisk
                    (([.9, .1, .9, .1, .9],
                      [.1, .9, .9, .9, .1],
                      [.9, .9, .9, .9, .9],
                      [.1, .9, .9, .9, .1],
                      [.9, .1, .9, .1, .9]),
                    (.1, .1, .1, .1, .1, .1, .9))]

                    # # 7. Square
                    # (([.9, .9, .9, .9, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .9, .9, .9, .9]),
                    # (.1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 8. H
                    # (([.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .9, .9, .9, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9]),
                    # (.1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 9. M
                    # (([.9, .9, .9, .9, .9],
                    #   [.9, .1, .9, .1, .9],
                    #   [.9, .1, .9, .1, .9],
                    #   [.9, .1, .9, .1, .9],
                    #   [.9, .1, .9, .1, .9]),
                    # (.1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 10. L
                    # (([.9, .1, .1, .1, .1],
                    #   [.9, .1, .1, .1, .1],
                    #   [.9, .1, .1, .1, .1],
                    #   [.9, .1, .1, .1, .1],
                    #   [.9, .9, .9, .9, .9]),
                    # (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 11. =
                    # (([.1, .1, .1, .1, .1],
                    #   [.9, .9, .9, .9, .9],
                    #   [.1, .1, .1, .1, .1],
                    #   [.9, .9, .9, .9, .9],
                    #   [.1, .1, .1, .1, .1]),
                    # (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 12. Hexagon
                    # (([.1, .1, .9, .1, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .1, .9, .1, .1]),
                    # (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 13. Diamond
                    # (([.1, .1, .9, .1, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.9, .1, .1, .1, .9],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .1, .9, .1, .1]),
                    # (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9))]

    testing_data = [# Cross
                    (([.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.9, .9, .1, .9, .9],
                      [.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1]),
                     (.9, .1, .1, .1, .1, .1)),

                    # Dash
                    (([.1, .1, .1, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.9, .9, .1, .9, .9],
                      [.1, .1, .1, .1, .1],
                      [.1, .1, .1, .1, .1]),
                     (.1, .9, .1, .1, .1, .1)),

                    # Backslash
                    (([.9, .1, .1, .1, .1],
                      [.1, .9, .1, .1, .1],
                      [.1, .1, .1, .9, .1],
                      [.1, .1, .1, .9, .1],
                      [.1, .1, .1, .1, .9]),
                     (.1, .1, .9, .1, .1, .1)),

                    # Forward Slash
                    (([.1, .1, .1, .1, .9],
                      [.1, .9, .1, .9, .1],
                      [.1, .1, .1, .1, .1],
                      [.1, .9, .1, .1, .1],
                      [.9, .1, .1, .1, .1]),
                     (.1, .1, .1, .9, .1, .1)),

                    # X
                    (([.9, .1, .1, .1, .9],
                      [.1, .9, .1, .9, .1],
                      [.1, .1, .1, .1, .1],
                      [.1, .9, .1, .9, .1],
                      [.9, .1, .1, .1, .9]),
                     (.1, .1, .1, .1, .9, .1)),

                    # Vertical Line
                    (([.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.1, .1, .1, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1]),
                     (.1, .1, .1, .1, .1, .9))]

    testing_data2 = [# Cross
                    (([.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.9, .9, .1, .9, .9],
                      [.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1]),
                     (.9, .1, .1, .1, .1, .1)),

                    # Dash
                    (([.1, .1, .1, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.9, .9, .1, .9, .9],
                      [.1, .1, .1, .1, .1],
                      [.1, .1, .1, .1, .1]),
                     (.1, .9, .1, .1, .1, .1)),

                    # Backslash
                    (([.9, .1, .1, .1, .1],
                      [.1, .9, .1, .1, .1],
                      [.1, .1, .1, .9, .1],
                      [.1, .1, .1, .9, .1],
                      [.1, .1, .1, .1, .9]),
                     (.1, .1, .9, .1, .1, .1)),

                    # Forward Slash
                    (([.1, .1, .1, .1, .9],
                      [.1, .9, .1, .9, .1],
                      [.1, .1, .1, .1, .1],
                      [.1, .9, .1, .1, .1],
                      [.9, .1, .1, .1, .1]),
                     (.1, .1, .1, .9, .1, .1)),

                    # X
                    (([.9, .1, .1, .1, .9],
                      [.1, .9, .1, .9, .1],
                      [.1, .1, .1, .1, .1],
                      [.1, .9, .1, .9, .1],
                      [.9, .1, .1, .1, .9]),
                     (.1, .1, .1, .1, .9, .1)),

                    # Vertical Line
                    (([.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.1, .1, .1, .1, .1],
                      [.1, .1, .9, .1, .1],
                      [.1, .1, .9, .1, .1]),
                     (.1, .1, .1, .1, .1, .9)),

                    # Asterisk
                    (([.9, .1, .9, .1, .9],
                      [.1, .9, .1, .9, .1],
                      [.9, .1, .1, .1, .9],
                      [.1, .9, .1, .9, .1],
                      [.9, .1, .9, .1, .9]),
                     (.1, .1, .1, .1, .1, .1, .9))]

                    # # 7. Square
                    # (([.9, .9, .9, .9, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .9, .9, .9, .9]),
                    #  (.1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 8. H
                    # (([.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .9, .9, .9, .9],
                    #   [.9, .1, .1, .1, .9],
                    #   [.9, .1, .1, .1, .9]),
                    #  (.1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 9. M
                    # (([.9, .9, .9, .9, .9],
                    #   [.9, .1, .9, .1, .9],
                    #   [.9, .1, .9, .1, .9],
                    #   [.9, .1, .9, .1, .9],
                    #   [.9, .1, .9, .1, .9]),
                    #  (.1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 10. L
                    # (([.9, .1, .1, .1, .1],
                    #   [.9, .1, .1, .1, .1],
                    #   [.9, .1, .1, .1, .1],
                    #   [.9, .1, .1, .1, .1],
                    #   [.9, .9, .9, .9, .9]),
                    #  (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 11. =
                    # (([.1, .1, .1, .1, .1],
                    #   [.9, .9, .9, .9, .9],
                    #   [.1, .1, .1, .1, .1],
                    #   [.9, .9, .9, .9, .9],
                    #   [.1, .1, .1, .1, .1]),
                    #  (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 12. Hexagon
                    # (([.1, .1, .9, .1, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .1, .9, .1, .1]),
                    #  (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9)),
                    #
                    # # 13. Diamond
                    # (([.1, .1, .9, .1, .1],
                    #   [.1, .9, .1, .9, .1],
                    #   [.9, .1, .1, .1, .9],
                    #   [.1, .9, .1, .9, .1],
                    #   [.1, .1, .9, .1, .1]),
                    #  (.1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .9))]

    FFNN = FeedForwardNetwork(25, 25, 1, 6, .02, 1)
    # print(len(training_data[0][0][0]))

    # Solution to symbol problem
    FFNN.load_training_data(training_data)
    print("Training on input 1")
    FFNN.train(1000)
    # FFNN.print_output()

    FFNN.load_testing_data(testing_data)
    print("Testing on input 1")
    FFNN.test()
    FFNN.print_output(testing=True)

    # Forgetting your Grandmother problem follows here
    # Inserting random column onto the end of hidden weight matrix - gives weight measures for additional output
    FFNN.hidden_weights = np.append(FFNN.hidden_weights, np.random.rand(
        FFNN.hidden_weights.shape[0], 1), axis=1)

    # Resizing target_output_vector (and thus the output vector) and inserting zero on the end
    FFNN.target_output_vector = np.append(FFNN.target_output_vector,
                                          [np.zeros(1)], axis=0)

    # Adding an additional output bias for new output node
    FFNN.output_bias = np.append(FFNN.output_bias, [np.ones(1)], axis=0)

    # Adding additional bias weight for new output node
    FFNN.output_bias_weights = np.append(FFNN.output_bias_weights,
                                         2*np.random.rand(1,1)-1, axis=0)

    FFNN.load_training_data(training_data2)
    print("Training on input 2")
    FFNN.train(1000)
    # FFNN.print_output()
    FFNN.load_testing_data(testing_data2)
    print("Testing on input 2")
    FFNN.test()
    FFNN.print_output(testing=True)

    # print("Testing on new data")
    # FFNN.load_testing_data(training_data2)
    # FFNN.test()
    # print("Testing on old data")
    # FFNN.load_testing_data(testing_data)
    # FFNN.test()
    # FFNN.write_output("testing_output.txt")
